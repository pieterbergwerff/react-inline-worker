{"version":3,"file":"static/webpack/static/development/pages/index.js.6cb484afabd24108c159.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport InlineWorker from '../src';\nimport { Row, Col, Card, Icon, Spin, Divider, Button, Alert } from 'antd';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/styles/hljs';\nimport '../style/main.css';\nimport 'antd/dist/antd.css';\n\nconst fn = () => {\n\tself.onmessage = ({ data }) => {\n\t\tvar to = setTimeout(() => {\n\t\t\tpostMessage('Hello world!');\n\t\t}, 1000);\n\t};\n};\n\nexport default () => (\n\t<div>\n\t\t<Row>\n\t\t\t<Col span={1}>&nbsp;</Col>\n\t\t\t<Col span={22}>\n\t\t\t\t<Card\n\t\t\t\t\ttitle={\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Icon type=\"info-circle\" theme=\"twoTone\" />\n\t\t\t\t\t\t\t&nbsp;&nbsp;react-inline-worker\n\t\t\t\t\t\t</>\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<Card bordered={false}>\n\t\t\t\t\t\t<Divider>Install</Divider>\n\t\t\t\t\t\t<SyntaxHighlighter language=\"bash\" style={docco}>\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t`npm install react-inline-worker`,\n\t\t\t\t\t\t\t\t`// or`,\n\t\t\t\t\t\t\t\t`yarn add react-inline-worker`,\n\t\t\t\t\t\t\t].join('\\n')}\n\t\t\t\t\t\t</SyntaxHighlighter>\n\t\t\t\t\t</Card>\n\t\t\t\t\t<HelloWorldExample />\n\t\t\t\t\t<FetchApiExample />\n\t\t\t\t</Card>\n\t\t\t</Col>\n\t\t\t<Col span={1}>&nbsp;</Col>\n\t\t</Row>\n\t\t<Row>\n\t\t\t<Col>\n\t\t\t\t<Card className=\"center\">\n\t\t\t\t\tThis demo is build with{' '}\n\t\t\t\t\t<a href=\"//nextjs.org\" target=\"_blank\">\n\t\t\t\t\t\tnextjs\n\t\t\t\t\t</a>\n\t\t\t\t\t,{' '}\n\t\t\t\t\t<a href=\"//ant.design\" target=\"_blank\">\n\t\t\t\t\t\tant.design\n\t\t\t\t\t</a>{' '}\n\t\t\t\t\tand{' '}\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"https://www.npmjs.com/package/react-syntax-highlighter\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t>\n\t\t\t\t\t\treact-syntax-highlighter\n\t\t\t\t\t</a>\n\t\t\t\t\t.\n\t\t\t\t</Card>\n\t\t\t</Col>\n\t\t</Row>\n\t</div>\n);\n\nfunction HelloWorldExample() {\n\treturn (\n\t\t<Example\n\t\t\ttitle=\"Get a 'Hello world!'\"\n\t\t\tdescription={\n\t\t\t\t<>\n\t\t\t\t\tUse the worker to receive a simple <i>Hello world</i>.\n\t\t\t\t</>\n\t\t\t}\n\t\t\tcode={[\n\t\t\t\t`import React from 'react';`,\n\t\t\t\t`import InlineWorker from 'react-inline-worker';`,\n\t\t\t\t``,\n\t\t\t\t`function fn(){`,\n\t\t\t\t`  postMessage('Hello world!');`,\n\t\t\t\t`}`,\n\t\t\t\t``,\n\t\t\t\t`function HelloWorldExample(){`,\n\t\t\t\t`  return <InlineWorker fn={fn}>{({ loading, error, data }) => {`,\n\t\t\t\t`    if (loading) return 'loading...';`,\n\t\t\t\t`    if (error) return 'Errors!';`,\n\t\t\t\t`    console.log(data); // Hello world!`,\n\t\t\t\t`    return <div>Message from worker: {data}</div>;`,\n\t\t\t\t`  }}</InlineWorker>;`,\n\t\t\t\t`}`,\n\t\t\t\t``,\n\t\t\t\t`export default HelloWorldExample;`,\n\t\t\t]}\n\t\t\tRunComponent={({ onReady }) => {\n\t\t\t\tfunction fn() {\n\t\t\t\t\tpostMessage('Hello world!');\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t<InlineWorker fn={fn}>\n\t\t\t\t\t\t{({ loading, error, data }) => {\n\t\t\t\t\t\t\tif (loading) return <Spin />;\n\t\t\t\t\t\t\tif (error) return 'Errors!';\n\t\t\t\t\t\t\tconsole.log(data); // Hello world!\n\t\t\t\t\t\t\tonReady();\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t}}\n\t\t\t\t\t</InlineWorker>\n\t\t\t\t);\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nfunction FetchApiExample() {\n\treturn (\n\t\t<Example\n\t\t\ttitle=\"Fetch json API\"\n\t\t\tdescription={\n\t\t\t\t<>\n\t\t\t\t\tThis example fetches your IP address from{' '}\n\t\t\t\t\t<i>\n\t\t\t\t\t\t<a href=\"//ipify.org\" target=\"_blank\">\n\t\t\t\t\t\t\tipify.org\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</i>\n\t\t\t\t\t.\n\t\t\t\t</>\n\t\t\t}\n\t\t\tcode={[\n\t\t\t\t`import React from 'react';`,\n\t\t\t\t`import InlineWorker from 'react-inline-worker';`,\n\t\t\t\t``,\n\t\t\t\t`function fn(){`,\n\t\t\t\t`  onmessage = function({ data }) {`,\n\t\t\t\t`    fetch(data.url)`,\n\t\t\t\t`      .then(result => result.json())`,\n\t\t\t\t`      .then(data => {`,\n\t\t\t\t`        postMessage(data);`,\n\t\t\t\t`      })`,\n\t\t\t\t`      .catch(err => {`,\n\t\t\t\t`        postMessage(err);`,\n\t\t\t\t`      });`,\n\t\t\t\t`  }`,\n\t\t\t\t`}`,\n\t\t\t\t``,\n\t\t\t\t`function FetchMyIpAddress(){`,\n\t\t\t\t`  return <InlineWorker fn={fn} data={{ url: 'https://api.ipify.org?format=json' }}>`,\n\t\t\t\t`    {({ loading, error, data }) => {`,\n\t\t\t\t`      if (loading) return 'loading...';`,\n\t\t\t\t`      if (error) return 'Errors!';`,\n\t\t\t\t`      console.log(data); // object`,\n\t\t\t\t`      return <div>My IP address from worker: {data.ip}</div>;`,\n\t\t\t\t`    }}`,\n\t\t\t\t`  </InlineWorker>;`,\n\t\t\t\t`}`,\n\t\t\t\t``,\n\t\t\t\t`export default FetchMyIpAddress;`,\n\t\t\t]}\n\t\t\tRunComponent={({ onReady }) => {\n\t\t\t\tfunction fn() {\n\t\t\t\t\tonmessage = function({ data }) {\n\t\t\t\t\t\tfetch(data.url)\n\t\t\t\t\t\t\t.then(result => result.json())\n\t\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\t\tpostMessage(data);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\t\tpostMessage(err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t<InlineWorker\n\t\t\t\t\t\tfn={fn}\n\t\t\t\t\t\tdata={{ url: 'https://api.ipify.org?format=json' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{({ loading, error, data }) => {\n\t\t\t\t\t\t\tif (loading) return <Spin />;\n\t\t\t\t\t\t\tif (error) return 'Errors!';\n\t\t\t\t\t\t\tonReady();\n\t\t\t\t\t\t\treturn JSON.stringify(data, undefined, 2);\n\t\t\t\t\t\t}}\n\t\t\t\t\t</InlineWorker>\n\t\t\t\t);\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nclass Example extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trunning: false,\n\t\t\tloading: false,\n\t\t\treset: false,\n\t\t};\n\t}\n\trender() {\n\t\tconst { title, description, code, RunComponent } = this.props;\n\t\tconst { running, loading, reset } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"example\">\n\t\t\t\t<Divider>{title}</Divider>\n\t\t\t\t<Row gutter={16}>\n\t\t\t\t\t<Col span={18}>\n\t\t\t\t\t\t<Card bordered={false}>\n\t\t\t\t\t\t\t<p>{description}</p>\n\t\t\t\t\t\t\t<div className=\"block\">\n\t\t\t\t\t\t\t\t<SyntaxHighlighter language=\"javascript\" style={docco}>\n\t\t\t\t\t\t\t\t\t{code.join('\\n')}\n\t\t\t\t\t\t\t\t</SyntaxHighlighter>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col span={6}>\n\t\t\t\t\t\t<Card bordered={false}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype={reset ? 'secondary' : 'primary'}\n\t\t\t\t\t\t\t\tdisabled={loading ? true : false}\n\t\t\t\t\t\t\t\tonClick={() => this.setState({ running: true })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{loading ? <Icon type=\"loading\" /> : reset ? 'Reset' : 'Run'}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t{running ? (\n\t\t\t\t\t\t\t\t<div className=\"block\">\n\t\t\t\t\t\t\t\t\t<Alert message={<b>Results</b>} type=\"success\" />\n\t\t\t\t\t\t\t\t\t<Card bordered={false}>\n\t\t\t\t\t\t\t\t\t\t<RunComponent\n\t\t\t\t\t\t\t\t\t\t\tonReady={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tlet to = setTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ loading: false, reset: true });\n\t\t\t\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</div>\n\t\t);\n\t}\n}\n"],"mappings":"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","sourceRoot":""}